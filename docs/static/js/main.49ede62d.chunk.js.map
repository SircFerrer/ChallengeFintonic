{"version":3,"sources":["components/Header.jsx","components/Question.jsx","components/QuestionTable.jsx","components/Pages.jsx","components/Body.jsx","components/App.js","api/questions.js","serviceWorker.js","index.js"],"names":["Header","className","Component","Question","props","question","category","type","difficulty","QuestionTable","console","log","questions","map","Pages","Body","App","state","fetch","then","response","json","responseData","results","setState","this","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+VAGqBA,G,uLAEb,OACI,yBAAKC,UAAU,QAEP,4BAAQA,UAAU,aAAY,uBAAGA,UAAU,gBAA3C,WACA,4BAAQA,UAAU,aAAY,uBAAGA,UAAU,gBAA3C,sBACA,4BAAQA,UAAU,aAAY,uBAAGA,UAAU,gBAA3C,QACA,4BAAQA,UAAU,aAAY,uBAAGA,UAAU,oBAA3C,YACA,4BAAQA,UAAU,aAAY,uBAAGA,UAAU,uBAA3C,e,GATgBC,c,kBCcrBC,MAff,SAAkBC,GAAQ,IAAD,EAC0BA,EAAMC,SAA/CC,EADe,EACfA,SAAUC,EADK,EACLA,KAAMC,EADD,EACCA,WAAYH,EADb,EACaA,SAEpC,OACE,oCACE,wBAAIJ,UAAU,WAAd,KACA,wBAAIA,UAAU,WAAWK,GACzB,wBAAIL,UAAU,WAAWM,GACzB,wBAAIN,UAAU,WAAWO,GACzB,wBAAIP,UAAU,WAAWI,GACzB,wBAAIJ,UAAU,kBAAd,c,MCiBSQ,MAzBf,SAAuBL,GAGrB,OAFAM,QAAQC,IAAIP,EAAMQ,WAGhB,2BAAOX,UAAU,SACf,wBAAIA,UAAU,gBACZ,wBAAIA,UAAU,sBAAd,MACA,wBAAIA,UAAU,sBAAd,YACA,wBAAIA,UAAU,sBAAd,QACA,wBAAIA,UAAU,sBAAd,cACA,wBAAIA,UAAU,sBAAd,sBACA,wBAAIA,UAAU,sBAAd,eAGDG,EAAMQ,UAAUA,UAAUC,KAAI,SAAAR,GAC7B,OACE,4BACE,kBAAC,EAAD,CAAUA,SAAUA,U,MCJjBS,MAdf,WACE,OAEE,yBAAKb,UAAU,SAEX,yBAAKA,UAAU,sBAAf,KACA,yBAAKA,UAAU,eAAf,KACA,yBAAKA,UAAU,eAAf,KACA,yBAAKA,UAAU,eAAf,KACA,yBAAKA,UAAU,eAAf,OCSOc,MAdf,SAAcX,GAIV,OAHAM,QAAQC,IAAIP,GAIR,yBAAKH,UAAU,QACX,wBAAIA,UAAU,eAAd,oBACA,kBAAC,EAAD,CAAeW,UAAWR,IAC1B,kBAAC,EAAD,QCeGY,E,YAtBb,WAAYZ,GAAQ,IAAD,8BACjB,4CAAMA,KACDa,MAAM,CACTL,UAAU,IAHK,E,iFAME,IAAD,OCbXM,MAAM,yCACVC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAY,OAAIA,EAAaC,WDYtBJ,MAAK,SAAAP,GAAS,OAAI,EAAKY,SAAS,CAAEZ,mB,+BAMjD,OAFAF,QAAQC,IAAIc,KAAKR,MAAML,WAGrB,yBAAKX,UAAU,OACf,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMW,UAAWa,KAAKR,MAAML,iB,GAjBhBc,IAAMxB,WEKJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.49ede62d.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport \"../stylesheets/Header.scss\"\n\nexport default class Header extends Component {\n    render() {\n        return (\n            <div className=\"menu\">\n                \n                    <button className=\"menu__btn\"><i className=\"fas fa-bars\"></i> browse</button>\n                    <button className=\"menu__btn\"><i className=\"fas fa-plus\"></i> add new questions</button>\n                    <button className=\"menu__btn\"><i className=\"fas fa-cogs\"></i> api</button>\n                    <button className=\"menu__btn\"><i className=\"fas fa-comments\"></i> discuss</button>\n                    <button className=\"menu__btn\"><i className=\"fas fa-sign-in-alt\"></i> login</button>\n\n                \n            </div>\n            \n        )\n    }\n}\n","import React from \"react\";\nimport \"../stylesheets/Question.scss\"\nfunction Question(props) {\n  const { category, type, difficulty, question } = props.question;\n\n  return (\n    <>\n      <td className=\"content\">1</td>\n      <td className=\"content\">{category}</td>\n      <td className=\"content\">{type}</td>\n      <td className=\"content\">{difficulty}</td>\n      <td className=\"content\">{question}</td>\n      <td className=\"content__color\">Cristina</td>\n    </>\n  );\n}\n\nexport default Question;\n","import React from \"react\";\nimport Question from \"./Question\";\nimport \"../stylesheets/QuestionTable.scss\"\n\nfunction QuestionTable(props) {\n  console.log(props.questions);\n\n  return (\n    <table className=\"table\">\n      <tr className=\"table__title\">\n        <th className=\"table__title__item\">ID</th>\n        <th className=\"table__title__item\">Category</th>\n        <th className=\"table__title__item\">Type</th>\n        <th className=\"table__title__item\">Difficulty</th>\n        <th className=\"table__title__item\">Question/Statement</th>\n        <th className=\"table__title__item\">Created By</th>\n      </tr>\n\n      {props.questions.questions.map(question => {\n        return (\n          <tr>\n            <Question question={question} />\n          </tr>\n        );\n      })}\n    </table>\n  );\n}\n\nexport default QuestionTable;\n","import React from \"react\";\nimport \"../stylesheets/Pages.scss\"\n\nfunction Pages() {\n  return (\n  \n    <div className=\"pages\">\n\n        <div className=\"pages__item__color\">1</div>\n        <div className=\"pages__item\">2</div>\n        <div className=\"pages__item\">3</div>\n        <div className=\"pages__item\">4</div>\n        <div className=\"pages__item\">></div>\n    </div>\n  );\n}\n\nexport default Pages;\n","import React from 'react';\nimport \"../stylesheets/Body.scss\"\nimport QuestionTable from \"./QuestionTable\"\nimport Pages from './Pages';\n\n\n\nfunction Body(props){\n    console.log(props);\n    \n\n    return (\n        <div className=\"body\">\n            <h1 className=\"body__title\">browse questions</h1>\n            <QuestionTable questions={props}/>\n            <Pages/>\n            \n        </div>\n    )\n}\n\nexport default Body;\n","import React from 'react';\nimport apiQuestions from \"../api/questions\"\nimport Header from './Header';\nimport \"../stylesheets/App.scss\"\n\nimport Body from './Body';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      questions:[]\n    }\n  }\n  componentDidMount() {\n    apiQuestions().then(questions => this.setState({ questions }));\n  }\n\n  render() {\n    console.log(this.state.questions);\n    \n    return (\n      <div className=\"App\">\n      <Header/>\n      <Body questions={this.state.questions}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export default () => {\n    return fetch(\"https://opentdb.com/api.php?amount=10\")\n      .then(response => response.json())\n      .then(responseData => responseData.results);\n  };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}